// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Reflection;

using NUnit.Framework;

namespace KiiCorp.Cloud.Storage
{
    [TestFixture()]
    public class TestKiiObject_body
    {
        private Encoding ENCODE_UTF8 = Encoding.GetEncoding("UTF-8");


        private void SetStandardUploadResponse(MockHttpClient client)
        {
            client.AddResponse(200, "{" +
                               "\"modifiedAt\" : 1337039114613" +
                               "}",
                               "2");
        }

        private void SetDownloadResponse(MockHttpClient client, string contentType, string value, string etag)
        {

            client.AddResponse(contentType, ENCODE_UTF8.GetBytes(value), etag);
        }

        private MemoryStream CreateTextStream(string value)
        {
            return new MemoryStream(ENCODE_UTF8.GetBytes(value));
        }

        private string readResponse(Stream data)
        {
            data.Seek(0, SeekOrigin.Begin);

            StreamReader sr = new StreamReader(data);
            string downloadedBody = sr.ReadToEnd();
            sr.Close();

            return downloadedBody;
        }

        #region UploadBody
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns modifiedAt,",
            expected = "We can get Modifiedtime that server sends"
            )]
        public void Test_0000_UploadBody_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));

            MemoryStream data = CreateTextStream("sample text file");
            obj.UploadBody("text/plain", data);

            Assert.AreEqual("text/plain", client.RequestHeader[0]["content-type"]);
            Assert.AreEqual("id1234", obj.ID);
            Assert.AreEqual(-1, obj.CreatedTime);
            Assert.AreEqual(1337039114613, obj.ModifedTime);
            Assert.AreEqual("text/plain", obj.BodyContentType);
            Assert.IsFalse(data.CanRead);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(obj);
            Assert.IsNull(eTag);
        }

        [Test(), ExpectedException(typeof(InvalidOperationException)), KiiUTInfo(
            action = "When we call UploadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be thrown"
            )]
        public void Test_0010_UploadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = Kii.Bucket("image").NewKiiObject();
            
            MemoryStream data = CreateTextStream("sample text file");
            obj.UploadBody("text/plain", data);
        }

        [Test(), ExpectedException(typeof(ArgumentException)), KiiUTInfo(
            action = "When we call UploadBody() with null contentType, ",
            expected = "ArgumentException must be thrown"
            )]
        public void Test_0011_UploadBody_contentType_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            obj.UploadBody(null, data);
        }

        [Test(), ExpectedException(typeof(ArgumentException)), KiiUTInfo(
            action = "When we call UploadBody() with null stream, ",
            expected = "ArgumentException must be thrown"
            )]
        public void Test_0012_UploadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            obj.UploadBody("text/plain", null);
        }

        [Test(), ExpectedException(typeof(ArgumentException)), KiiUTInfo(
            action = "When we call UploadBody() with not readable stream, ",
            expected = "ArgumentException must be thrown"
            )]
        public void Test_0013_UploadBody_stream_cannot_read ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));

            MemoryStream data = CreateTextStream("sample text file");
            data.Close();
            obj.UploadBody("text/plain", data);
        }

        [Test(), ExpectedException(typeof(NotFoundException)), KiiUTInfo(
            action = "When we call UploadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be thrown"
            )]
        public void Test_0014_UploadBody_Server_404 ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            this.SetStandardUploadResponse(client);

            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            obj.UploadBody("text/plain", data);
        }

        [Test(), ExpectedException(typeof(IllegalKiiBaseObjectFormatException)), KiiUTInfo(
            action = "When we call UploadBody() and Server returns broken JSON, ",
            expected = "IllegalKiiBaseObjectFormatException must be thrown"
            )]
        public void Test_0015_UploadBody_broken_json ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(500, "broken");
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            obj.UploadBody("text/plain", data);
        }

        #endregion

        #region UploadBody(string contentType, Stream stream, KiiObjectCallback callback)
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns modifiedAt,",
            expected = "We can get Modifiedtime that server sends"
            )]
        public void Test_0100_UploadBody_async_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNull(exception);
            
            Assert.AreEqual("text/plain", client.RequestHeader[0]["content-type"]);
            Assert.AreEqual("id1234", outObj.ID);
            Assert.AreEqual(-1, outObj.CreatedTime);
            Assert.AreEqual(1337039114613, outObj.ModifedTime);
            Assert.AreEqual("text/plain", outObj.BodyContentType);
            Assert.IsFalse(data.CanRead);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(obj);
            Assert.IsNull(eTag);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be returned"
            )]
        public void Test_0110_UploadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = Kii.Bucket("image").NewKiiObject();
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with null contentType, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0111_UploadBody_contentType_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody(null, data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with null stream, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0112_UploadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", null, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with not readable stream, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0113_UploadBody_stream_cannot_read ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            data.Close();
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be returned"
            )]
        public void Test_0114_UploadBody_Server_404 ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is NotFoundException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns broken JSON, ",
            expected = "IllegalKiiBaseObjectFormatException must be thrown"
            )]
        public void Test_0115_UploadBody_broken_json ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(500, "broken");
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is IllegalKiiBaseObjectFormatException);
        }
        #endregion


        #region UploadBody(string contentType, Stream stream, KiiObjectCallback callback, KiiObjectBodyProgressCallback progressCallback)
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns modifiedAt,",
            expected = "We can get Modifiedtime that server sends"
            )]
        public void Test_0200_UploadBody_async_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", data, 
            (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );

            Assert.IsTrue(done);
            Assert.IsNull(exception);
            Assert.AreEqual(1, doneByteList.Count);
            Assert.AreEqual(16, doneByteList[0]);
            Assert.AreEqual(1, totalByteList.Count);
            Assert.AreEqual(16, totalByteList[0]);

            Assert.AreEqual("text/plain", client.RequestHeader[0]["content-type"]);
            Assert.AreEqual("id1234", outObj.ID);
            Assert.AreEqual(-1, outObj.CreatedTime);
            Assert.AreEqual(1337039114613, outObj.ModifedTime);
            Assert.AreEqual("text/plain", outObj.BodyContentType);
            Assert.IsFalse(data.CanRead);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(outObj);
            Assert.IsNull(eTag);
        }

        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server calls progress callback 2 times,",
            expected = "The parameter of progress callback must be correct."
            )]
        public void Test_0201_UploadBody_async_OK_progress_2 ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(2);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            
            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.UploadBody("text/plain", data, 
                           (KiiObject obj2, Exception e) =>
                           {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNull(exception);
            Assert.AreEqual(2, doneByteList.Count);
            Assert.AreEqual(8, doneByteList[0]);
            Assert.AreEqual(16, doneByteList[1]);
            Assert.AreEqual(2, totalByteList.Count);
            Assert.AreEqual(16, totalByteList[0]);
            Assert.AreEqual(16, totalByteList[1]);

            Assert.AreEqual("text/plain", client.RequestHeader[0]["content-type"]);
            Assert.AreEqual("id1234", outObj.ID);
            Assert.AreEqual(-1, outObj.CreatedTime);
            Assert.AreEqual(1337039114613, outObj.ModifedTime);
            Assert.AreEqual("text/plain", outObj.BodyContentType);
            Assert.IsFalse(data.CanRead);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(obj);
            Assert.IsNull(eTag);
        }

        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be returned"
            )]
        public void Test_0210_UploadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = Kii.Bucket("image").NewKiiObject();
            
            MemoryStream data = CreateTextStream("sample text file");

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );

            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with null contentType, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0211_UploadBody_contentType_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            obj.UploadBody(null, data, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with null stream, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0212_UploadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", null, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() with not readable stream, ",
            expected = "ArgumentException must be returned"
            )]
        public void Test_0213_UploadBody_stream_cannot_read ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");
            data.Close();

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );

            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be returned"
            )]
        public void Test_0214_UploadBody_Server_404 ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is NotFoundException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call UploadBody() and Server returns broken JSON, ",
            expected = "IllegalKiiBaseObjectFormatException must be thrown"
            )]
        public void Test_0215_UploadBody_broken_json ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(500, "broken");
            this.SetStandardUploadResponse(client);
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = CreateTextStream("sample text file");

            bool done = false;
            KiiObject outObj = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();

            obj.UploadBody("text/plain", data, (KiiObject obj2, Exception e) =>
            {
                done = true;
                outObj = obj2;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is IllegalKiiBaseObjectFormatException);
        }
        #endregion

        #region DownloadBody()
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns object body, ",
            expected = "Object body is written on given stream."
            )]
        public void Test_1000_DownloadBody_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            obj.DownloadBody(data);
            
            Assert.IsTrue(data.CanRead);
            string downloadedBody = readResponse(data);
            data.Close();

            Assert.AreEqual("uploaded text file", downloadedBody);
            Assert.AreEqual("text/plain", obj.BodyContentType);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(obj);
            Assert.IsNull(eTag);
        }

        [Test(), ExpectedException(typeof(InvalidOperationException)), KiiUTInfo(
            action = "When we call DownloadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be thrown."
            )]
        public void Test_1010_DownloadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = Kii.Bucket("images").NewKiiObject();
            
            MemoryStream data = new MemoryStream(8192);
            obj.DownloadBody(data);
        }

        [Test(), ExpectedException(typeof(ArgumentException)), KiiUTInfo(
            action = "When we call DownloadBody() with null stream, ",
            expected = "ArgumentException must be thrown."
            )]
        public void Test_1011_DownloadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            obj.DownloadBody(null);
        }

        [Test(), ExpectedException(typeof(ArgumentException)), KiiUTInfo(
            action = "When we call DownloadBody() with not writable stream, ",
            expected = "ArgumentException must be thrown."
            )]
        public void Test_1012_DownloadBody_cannot_write ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));

            MemoryStream data = new MemoryStream(8192);
            data.Close();
            obj.DownloadBody(data);
        }

        [Test(), ExpectedException(typeof(NotFoundException)), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be thrown."
            )]
        public void Test_1013_DownloadBody_Server_404()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            obj.DownloadBody(data);
        }
        #endregion

        #region DownloadBody(Stream outStream, KiiObjectBodyDownloadCallback callback)
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns object body, ",
            expected = "Object body is written on given stream."
            )]
        public void Test_1100_DownloadBody_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);

            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;

            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNull(exception);
            
            Assert.IsTrue(data.CanRead);
            string downloadedBody = readResponse(data);
            data.Close();
            
            Assert.AreEqual("uploaded text file", downloadedBody);
            Assert.AreEqual("text/plain", outObj.BodyContentType);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(outObj);
            Assert.IsNull(eTag);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be returned."
            )]
        public void Test_1110_DownloadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = Kii.Bucket("images").NewKiiObject();
            
            MemoryStream data = new MemoryStream(8192);

            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;

            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() with null stream, ",
            expected = "ArgumentException must be returned."
            )]
        public void Test_1111_DownloadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));

            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;

            obj.DownloadBody(null, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() with not writable stream, ",
            expected = "ArgumentException must be returned."
            )]
        public void Test_1112_DownloadBody_cannot_write ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            data.Close();

            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;

            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            });

            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
            Assert.IsFalse(data.CanRead);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be returned."
            )]
        public void Test_1113_DownloadBody_Server_404()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);

            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;

            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            });

            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is NotFoundException);
            Assert.IsTrue(data.CanRead);
        }
        #endregion

        #region DownloadBody(Stream outStream, KiiObjectBodyDownloadCallback callback, KiiObjectBodyProgressCallback progressCallback)        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns object body, ",
            expected = "Object body is written on given stream."
            )]
        public void Test_1200_DownloadBody_OK ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNull(exception);
            Assert.AreEqual(1, doneByteList.Count);
            Assert.AreEqual(18, doneByteList[0]);
            Assert.AreEqual(1, totalByteList.Count);
            Assert.AreEqual(18, totalByteList[0]);
            
            Assert.IsTrue(data.CanRead);
            string downloadedBody = readResponse(data);
            data.Close();
            
            Assert.AreEqual("uploaded text file", downloadedBody);
            Assert.AreEqual("text/plain", outObj.BodyContentType);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(outObj);
            Assert.IsNull(eTag);
        }

        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server calls progress callback 4 times, ",
            expected = "The parameter of progress callback must be correct."
            )]
        public void Test_1201_DownloadBody_4Times ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(4);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNull(exception);
            Assert.AreEqual(4, doneByteList.Count);
            Assert.AreEqual(4, doneByteList[0]);
            Assert.AreEqual(8, doneByteList[1]);
            Assert.AreEqual(12, doneByteList[2]);
            Assert.AreEqual(18, doneByteList[3]);
            Assert.AreEqual(4, totalByteList.Count);
            Assert.AreEqual(18, totalByteList[0]);
            
            Assert.IsTrue(data.CanRead);
            string downloadedBody = readResponse(data);
            data.Close();
            
            Assert.AreEqual("uploaded text file", downloadedBody);

            // Check eTag should be null
            string eTag = (string)typeof(KiiObject).GetField("mEtag", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(outObj);
            Assert.IsNull(eTag);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Object is not uploaded, ",
            expected = "InvalidOperationException must be returned."
            )]
        public void Test_1210_DownloadBody_No_ID ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = Kii.Bucket("images").NewKiiObject();
            
            MemoryStream data = new MemoryStream(8192);
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);

            Assert.AreEqual(0, doneByteList.Count);
            Assert.AreEqual(0, totalByteList.Count);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() with null stream, ",
            expected = "ArgumentException must be returned."
            )]
        public void Test_1211_DownloadBody_stream_null ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(null, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);

            Assert.AreEqual(0, doneByteList.Count);
            Assert.AreEqual(0, totalByteList.Count);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() with not writable stream, ",
            expected = "ArgumentException must be returned."
            )]
        public void Test_1212_DownloadBody_cannot_write ()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            this.SetDownloadResponse(client, "text/plain", "uploaded text file", "2");
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            data.Close();
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
                             {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is ArgumentException);
            Assert.IsFalse(data.CanRead);

            Assert.AreEqual(0, doneByteList.Count);
            Assert.AreEqual(0, totalByteList.Count);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call DownloadBody() and Server returns HTTP 404, ",
            expected = "NotFoundException must be returned."
            )]
        public void Test_1213_DownloadBody_Server_404()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddNumProgress(1);
            client.AddResponse(new NotFoundException("not found", null, "{}", NotFoundException.Reason.OBJECT_NOT_FOUND));
            
            KiiObject obj = KiiObject.CreateByUri(new Uri("kiicloud://buckets/test/objects/id1234"));
            
            MemoryStream data = new MemoryStream(8192);
            
            bool done = false;
            KiiObject outObj = null;
            Stream outStream = null;
            Exception exception = null;
            IList<long> doneByteList = new List<long>();
            IList<long> totalByteList = new List<long>();
            
            obj.DownloadBody(data, (KiiObject obj2, Stream stream, Exception e) =>
            {
                done = true;
                outObj = obj2;
                outStream = stream;
                exception = e;
            },
            (KiiObject obj3, long doneByte, long totalByte) =>
            {
                doneByteList.Add(doneByte);
                totalByteList.Add(totalByte);
            }
            );
            
            Assert.IsTrue(done);
            Assert.IsNotNull(outObj);
            Assert.IsNotNull(outStream);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is NotFoundException);
            Assert.IsTrue(data.CanRead);

            Assert.AreEqual(0, doneByteList.Count);
            Assert.AreEqual(0, totalByteList.Count);
        }
        #endregion
    }
}

