// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Text;
using JsonOrg;

namespace KiiCorp.Cloud.Storage
{
    public class AppUtil
    {
        public static KiiUser CreateNewUser(string username, string pass) {
            KiiUser testUser = KiiUser.BuilderWithName (username).Build ();
            testUser.Register (pass);
            return testUser;
        }

        public static void DeleteUser(KiiUser user) {
            user.Delete();
        }

        public static string GetAdminToken(BaseApp app)
        {
            JsonObject body = new JsonObject();
            body.Put("grant_type", "client_credentials");
            body.Put("client_id", app.ClientId);
            body.Put("client_secret", app.ClientSecret);
            
            string url = Utils.Path(Kii.BaseUrl, "apps", app.AppId, "oauth2", "token");
            KiiHttpClient client = new KiiClientFactoryImpl().Create(url, app.AppId, app.AppKey, KiiHttpMethod.POST);
            client.Headers["Authorization"] = "Basic " + Convert.ToBase64String(Encoding.UTF8.GetBytes(app.AppId + ":" + app.AppKey));
            client.ContentType = "application/json";
            client.Body = body.ToString();
            ApiResponse response = client.SendRequest();
            return new JsonObject(response.Body).GetString("access_token");
        }

        public static string DeployServerCode(BaseApp app, string code)
        {
            string adminToken = GetAdminToken(app);
            string url = Utils.Path(Kii.BaseUrl, "apps", app.AppId, "server-code");
            KiiHttpClient client = new KiiClientFactoryImpl().Create(url, app.AppId, app.AppKey, KiiHttpMethod.POST);
            client.Headers["Authorization"] = "Bearer " + adminToken;
            client.ContentType = "application/javascript";
            client.Body = code;

            ApiResponse response = client.SendRequest();
            return new JsonObject(response.Body).GetString("versionID");
        }
    }
}

