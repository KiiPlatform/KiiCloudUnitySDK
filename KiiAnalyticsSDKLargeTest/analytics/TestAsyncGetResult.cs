// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using JsonOrg;
using KiiCorp.Cloud.Storage;
using System.Threading;
using NUnit.Framework;

namespace KiiCorp.Cloud.Analytics
{
    [TestFixture()]
    [Ignore("abolished.")]
    public class TestAsyncGetResult
    {
        // Test spec: https://docs.google.com/a/kii.com/spreadsheet/ccc?key=0AlSyizQDsStPdE5mVXRLVWNURS1yUmo3SWpYMFVlOVE&usp=drive_web#gid=3
        const string RULE_ID = "4672";

        [SetUp()]
        public void SetUp()
        {
            BaseApp app = new AnalyticsResultApp();
            KiiAnalytics.Instance = null;
            KiiAnalytics.Initialize (app.AppId, app.AppKey, app.BaseUrl, "dev004");
        }

        [Test()]
        public void Test_1_1_GetResult()
        {   
            GroupedResult result = null;
            string ruleId = null;
            ResultCondition condition = null;
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch(1);
            KiiAnalytics.GetResult(RULE_ID, null, (string id, ResultCondition c, GroupedResult r, Exception e)=>{
                Interlocked.Exchange(ref result, r);
                Interlocked.Exchange(ref ruleId, id);
                Interlocked.Exchange(ref condition, c);
                Interlocked.Exchange(ref exp, e);
                cd.Signal();
            });
            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.AreEqual(ruleId, RULE_ID);
            Assert.IsNull(condition);
            Assert.IsNotNull(result);
            Assert.IsNull(exp);
            
            Assert.IsNotNull(result.SnapShots);
            IList<GroupedSnapShot> snapshots = result.SnapShots;
            Assert.AreEqual(1, snapshots.Count);
            
            GroupedSnapShot snapShot1 = snapshots[0];
            Assert.AreEqual("DEFAULT", snapShot1.Name);
            Assert.IsTrue(snapShot1.PointStart > 0);
            Assert.IsTrue(snapShot1.PointInterval > 0);
            JsonArray data = snapShot1.Data;
            Assert.AreEqual(1, data.Length());
        }

        [Test()]
        public void Test_1_2_GetResult_RuleIdNotExists ()
        {   
            GroupedResult result = null;
            string ruleId = null;
            ResultCondition condition = null;
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch (1);
            KiiAnalytics.GetResult ("0001", null, (string id, ResultCondition c, GroupedResult r, Exception e) => {
                Interlocked.Exchange (ref result, r);
                Interlocked.Exchange (ref ruleId, id);
                Interlocked.Exchange (ref condition, c);
                Interlocked.Exchange (ref exp, e);
                cd.Signal ();
            });
            
            if (!cd.Wait (new TimeSpan (0, 0, 0, 3)))
                Assert.Fail ("Callback not fired.");
            Assert.AreEqual (ruleId, "0001");
            Assert.IsNull (condition);
            Assert.IsNull (result);
            Assert.IsNotNull (exp);

            Assert.That (exp, Is.InstanceOf<CloudException> ());
            CloudException ex = (CloudException)exp;
            Assert.AreEqual (404, ex.Status);
            JsonObject json = new JsonObject (ex.Body);
            Assert.AreEqual ("NOT_FOUND", json.GetString ("errorCode"));
        }
    }
}

