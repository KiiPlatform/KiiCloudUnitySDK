// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;

namespace KiiCorp.Cloud.Storage
{
    [TestFixture()]
    public class KiiUserStatusTest
    {
        private MockHttpClient client;

        [SetUp()]
        public void SetUp()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            client = (MockHttpClient)factory.Client;
        }

        [Test(), KiiUTInfo(
            action = "When we create user with id, then check the user status.",
            expected = "Created user should have disabled"
        )]
        public void Test_GetInitialStatus()
        {
            KiiUser user = KiiUser.UserWithID("dummyID");
            Assert.IsFalse(user.Disabled);
        }

        [Test(), KiiUTInfo(
            action = "When refresh response contains '_disabled' true",
            expected = "User should have enabled"
        )]
        public void Test_GetStatusWhenDisabledIsTrue()
        {
            // refresh response
            string response = @"
            {
                 ""userID"" : ""dummyID"",
                 ""internalUserID"" : 87442786592227328,
                 ""loginName"" : ""kii_user01"",
                 ""_disabled"" : ""true""
            }
            ";
            client.AddResponse(200, response);

            KiiUser user = KiiUser.UserWithID("dummyID");
            user.Refresh();

            Assert.AreEqual("kii_user01", user.Username);
            Assert.IsTrue(user.Disabled);

            // verify request.
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL, "apps", "appId", "users", "dummyID");
            Assert.AreEqual(url, client.RequestUrl [0]);
            Assert.AreEqual(KiiHttpMethod.GET, client.RequestMethod [0]);
            MockHttpHeaderList headerList = client.RequestHeader [0];
            Assert.AreEqual("appId", headerList ["X-Kii-AppID"]);
            Assert.AreEqual("appKey", headerList ["X-Kii-AppKey"]);
            Assert.IsTrue(headerList ["X-Kii-SDK"].StartsWith("sn=cs;sv="));
        }

        [Test(), KiiUTInfo(
            action = "When refresh response contains '_disabled' false",
            expected = "User should have disabled"
        )]
        public void Test_GetStatusWhenDisabledIsFalse()
        {
            // refresh response
            string response = @"
            {
                 ""userID"" : ""dummyID"",
                 ""internalUserID"" : 87442786592227328,
                 ""loginName"" : ""kii_user01"",
                 ""_disabled"" : ""false""
            }
            ";
            client.AddResponse(200, response);
            KiiUser user = KiiUser.UserWithID("dummyID");
            user.Refresh();
            
            Assert.AreEqual("kii_user01", user.Username);
            Assert.IsFalse(user.Disabled);
            
            // verify request.
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL, "apps", "appId", "users", "dummyID");
            Assert.AreEqual(url, client.RequestUrl [0]);
            Assert.AreEqual(KiiHttpMethod.GET, client.RequestMethod [0]);
            MockHttpHeaderList headerList = client.RequestHeader [0];
            Assert.AreEqual("appId", headerList ["X-Kii-AppID"]);
            Assert.AreEqual("appKey", headerList ["X-Kii-AppKey"]);
            Assert.IsTrue(headerList ["X-Kii-SDK"].StartsWith("sn=cs;sv="));
        }

        [Test(), KiiUTInfo(
            action = "When pseudo user refresh response contains '_disabled' false",
            expected = "Pseudo user should have Disabled"
        )]
        public void Test_PseudoUserDisabledStatus()
        {
            // refresh response
            string response = @"
            {
                 ""userID"" : ""dummyID"",
                 ""internalUserID"" : 87442786592227328,
                 ""_accessToken"" : ""abcd1234"",
                 ""_disabled"" : ""false""
            }
            ";
            client.AddResponse(200, response);
            KiiUser user = KiiUser.RegisterAsPseudoUser(null);
            Assert.IsFalse(user.Disabled);

            // verify request.
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL, "apps", "appId", "users");
            Assert.AreEqual(url, client.RequestUrl [0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod [0]);
            MockHttpHeaderList headerList = client.RequestHeader [0];
            Assert.AreEqual("appId", headerList ["X-Kii-AppID"]);
            Assert.AreEqual("appKey", headerList ["X-Kii-AppKey"]);
            Assert.IsTrue(headerList ["X-Kii-SDK"].StartsWith("sn=cs;sv="));
        }
    }
}

