// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using JsonOrg;
namespace KiiCorp.Cloud.Storage
{
    // Test spec : https://docs.google.com/a/kii.com/spreadsheet/ccc?key=0AsiWA7MkWrQldHFnX3I2bXBzQlhMSlRuTG9JdUQ5X0E&usp=drive_web#gid=4
    [TestFixture()]
    public class TestObjectCount
    {
        [SetUp()]
        public void SetUp(){
            Kii.Initialize("appId", "appKey", Kii.Site.US);
        }
        [Test()]
        public void Test_1_2_CountAllWhenObjectNotExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{\"aggregations\" : { \"count_field\" : 0 } }");

            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            int count = bucket.Count();

            Assert.AreEqual(0, count);

            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            string queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"all\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_1_3_CountAllWhenObjectExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(201, "{\"aggregations\" : { \"count_field\" : 10 } }");
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            int count = bucket.Count();
            
            Assert.AreEqual(10, count);
            
            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            string queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                    "\"type\" : \"all\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                    "\"type\" : \"COUNT\"," +
                    "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                    "}" +
                    "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_1_4_CountWhenBucketParentNotExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            string mockResponseBody = "{\"errorCode\" : \"USER_NOT_FOUND\"}";
            client.AddResponse(new CloudException(404, mockResponseBody));
            
            string bucketName = "TestBucket";
            KiiUser user = KiiUser.CreateByUri(new Uri("kiicloud://users/dummyUserId"));
            KiiBucket bucket = user.Bucket(bucketName);
            CloudException exp = null;
            try {
                bucket.Count();
                Assert.Fail("Exception not thrown");
            } catch(CloudException e) {
                exp = e;
            }
            Assert.IsNotNull(exp);
            Assert.AreEqual(404, exp.Status);
            Assert.AreEqual(mockResponseBody, exp.Body);
            
            // check request.
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","users", "dummyUserId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            string queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                    "\"type\" : \"all\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                    "\"type\" : \"COUNT\"," +
                    "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                    "}" +
                    "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_2_2_CountWithEqQueryWhenObjectNotExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{\"aggregations\" : { \"count_field\" : 0 } }");
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            KiiClause clause = KiiClause.Equals("key", "value");
            KiiQuery query = new KiiQuery(clause);
            int count = bucket.Count(query);
            Assert.AreEqual(0, count);
            
            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            String queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"eq\"," +
                        "\"field\" : \"key\"," +
                        "\"value\" : \"value\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_2_3_CountWithEqQueryWhenObjectExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{\"aggregations\" : { \"count_field\" : 10 } }");
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            KiiClause clause = KiiClause.Equals("key", "value");
            KiiQuery query = new KiiQuery(clause);
            int count = bucket.Count(query);
            Assert.AreEqual(10, count);
            
            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            String queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"eq\"," +
                        "\"field\" : \"key\"," +
                        "\"value\" : \"value\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_2_4_CountWithAllQueryWhenObjectExists(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{\"aggregations\" : { \"count_field\" : 10 } }");
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            KiiQuery query = new KiiQuery(null);
            int count = bucket.Count(query);
            Assert.AreEqual(10, count);
            
            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            String queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"all\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_2_5_CountWithOrQuery(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{\"aggregations\" : { \"count_field\" : 5 } }");
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            KiiClause clause1 = KiiClause.Equals("key1", "value1");
            KiiClause clause2 = KiiClause.Equals("key2", "value2");
            KiiClause clause = KiiClause.Or(clause1, clause2);
            KiiQuery query = new KiiQuery(clause);
            int count = bucket.Count(query);
            Assert.AreEqual(5, count);
            
            // check request.
            Console.WriteLine(client.RequestBody[0]);
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            String queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"or\"," +
                        "\"clauses\" :[ {" +
                            "\"type\" : \"eq\"," +
                            "\"field\" : \"key1\"," +
                            "\"value\" : \"value1\"" +
                        "}," +
                        "{" +
                            "\"type\" : \"eq\"," +
                            "\"field\" : \"key2\"," +
                            "\"value\" : \"value2\"" +
                        "}]" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }

        [Test()]
        public void Test_2_6_CountWithUnsupportedQuery(){
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            
            // set response
            MockHttpClient client = factory.Client;
            string mockResponseBody = "{\"errorCode\" : \"QUERY_NOT_SUPPORTED\"}";
            client.AddResponse(new CloudException(400, mockResponseBody));
            
            string bucketName = "TestBucket";
            KiiBucket bucket = Kii.Bucket(bucketName);
            KiiClause clause = KiiClause.Equals("key", "value");
            KiiQuery query = new KiiQuery(clause);
            query.NextPaginationKey = "pkey";
            CloudException exp = null;
            try {
                bucket.Count(query);
                Assert.Fail("Exception not thrown");
            } catch(CloudException e) {
                exp = e;
            }
            Assert.IsNotNull(exp);
            Assert.AreEqual(400, exp.Status);
            Assert.AreEqual(mockResponseBody, exp.Body);
            
            // check request.
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps","appId","buckets","TestBucket", "query");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual("appId",headerList["X-Kii-AppID"] );
            Assert.AreEqual("appKey",headerList["X-Kii-AppKey"] );
            String queryStr = "{ " +
                "\"bucketQuery\" : {" +
                    "\"clause\" : {" +
                        "\"type\" : \"eq\"," +
                        "\"field\" : \"key\"," +
                        "\"value\" : \"value\"" +
                    "}," +
                    "\"aggregations\" : [ {" +
                        "\"type\" : \"COUNT\"," +
                        "\"putAggregationInto\" : \"count_field\"" +
                    "}]" +
                "}, " +
                "\"paginationKey\" : \"pkey\"" +
            "}";
            JsonObject expectedBodyJson = new JsonObject(queryStr);
            JsonObject actualBodyJson = new JsonObject(client.RequestBody[0]);
            KiiAssertion.AssertJson(expectedBodyJson, actualBodyJson);
        }
    }
}
