// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using System.Collections;
using System.Reflection;
using JsonOrg;

namespace KiiCorp.Cloud.Storage
{
    [TestFixture(),TestSpec(url = "https://docs.google.com/a/kii.com/spreadsheets/d/12e23aCc8FtLzjKKwt4Eu9gDONKTjgE9P76Xs0gGBeTs/edit#gid=2142504003")]
    public class TestAccessTokenExpiration
    {

        private static  string APP_ID = "dummyId";
        private static  string APP_KEY = "dummykey";

        [SetUp()]
        public void SetUp() {
            if(Kii.Instance != null)
                Kii.Instance = null;
        }

        [TearDown()]
        public void TearDown() {
            if(Kii.Instance != null)
                Kii.Instance = null;
        }

        [Test(), ExpectedException(typeof(ArgumentException)), TestCaseNumber("1-1")]
        public void Test_Set_AccessTokenExpiration_With_Negative_Value(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.JP);
            Kii.AccessTokenExpiration = -1;
        }

        [Test(), TestCaseNumber("1-2")]
        public void Test_Set_AccessTokenExpiration_With_Positive_Value(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.JP);
            Kii.AccessTokenExpiration = 1;
            Assert.AreEqual(1, Kii.AccessTokenExpiration);
        }

        [Test(), ExpectedException(typeof(InvalidOperationException)), TestCaseNumber("1-3-1")]
        public void Test_Set_AccessTokenExpiration_Before_Initialization(){
            Kii.AccessTokenExpiration = 1;
        }

        [Test(), ExpectedException(typeof(InvalidOperationException)), TestCaseNumber("1-3-2")]
        public void Test_Get_AccessTokenExpiration_Before_Initialization(){
            long time = Kii.AccessTokenExpiration;
        }

        [Test(), TestCaseNumber("1-4")]
        public void Test_Set_AccessTokenExpiration_With_Zero(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.JP);
            Kii.AccessTokenExpiration = 0;
            Assert.AreEqual(0, Kii.AccessTokenExpiration);
        }

        [Test(), TestCaseNumber("2-1-1, 3-2")]
        public void Test_Login_Without_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);

            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                            "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775" +
                            "}");

            // set refresh response
            client.AddResponse(200, 
                            "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                            "}");

            // check expiresIn set to default.
            Assert.AreEqual(0, Kii.AccessTokenExpiration);

            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogIn("dummyUser", "111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, tokenBundle["expires_at"]);

            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));

            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
        }

        [Test(), TestCaseNumber("2-1-2, 3-3")]
        public void Test_Login_With_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 3600" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");

            // set access token expiration
            Kii.AccessTokenExpiration = 3600;
            Assert.AreEqual(3600, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogIn("dummyUser", "111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            DateTime expiresAt = (DateTime)tokenBundle["expires_at"];
            Assert.IsTrue( DateTime.Compare(expiresAt, DateTime.UtcNow) > 0);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(3, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
            Assert.IsTrue(requestBody.GetLong("expiresAt") >= CurrentTimeMillis());
        }

        [Test(), TestCaseNumber("2-1-3")]
        public void Test_Login_With_TokenExpiration_MaxLong(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
            
            // set access token expiration
            Kii.AccessTokenExpiration = long.MaxValue;
            Assert.AreEqual(long.MaxValue, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogIn("dummyUser", "111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, tokenBundle["expires_at"]);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(3, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
            Assert.AreEqual(DateTimeMaxToUnixTimeMillis(), requestBody.GetLong("expiresAt"));
        }

        [Test(), TestCaseNumber("2-1-4")]
        public void Test_Login_With_TokenExpiration_Negative(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);

            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;

            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : -9223372036854775" +
                               "}");

            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");

            // set access token expiration to negative
            FieldInfo fieldInfo = typeof(Kii).GetField("INSTANCE",  BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic);
            Kii kii = (Kii)fieldInfo.GetValue (null);
            SDKTestHack.SetField(kii, "mAccessTokenExpiration", -1L);
            Assert.AreEqual(-1L, Kii.AccessTokenExpiration);

            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogIn("dummyUser", "111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MinValue, tokenBundle["expires_at"]);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
        }

        [Test(), TestCaseNumber("2-2-1")]
        public void Test_LoginWithFacebookToken_Without_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775," +
                               "\"new_user_created\" : false" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
            
            // check expiresIn set to default.
            Assert.AreEqual(0, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LoginWithFacebookToken("dummyFbToken");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, (DateTime)tokenBundle["expires_at"]);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps",APP_ID, "integration", "facebook");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(1, requestBody.Length());
            Assert.AreEqual("dummyFbToken", requestBody.GetString("accessToken"));
        }
        
        [Test(), TestCaseNumber("2-2-2")]
        public void Test_LoginWithFacebookToken_With_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 3600," +
                               "\"new_user_created\" : false" +
                               "}");
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
            
            // set access token expiration
            Kii.AccessTokenExpiration = 3600;
            Assert.AreEqual(3600, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LoginWithFacebookToken("dummyFbToken");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            DateTime expiresAt = (DateTime) tokenBundle["expires_at"];
            Assert.IsTrue( DateTime.Compare(expiresAt, DateTime.UtcNow) > 0);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps",APP_ID, "integration", "facebook");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("dummyFbToken", requestBody.GetString("accessToken"));
            Assert.IsTrue(requestBody.GetLong("expiresAt") >= CurrentTimeMillis());
        }

        [Test(), TestCaseNumber("2-2-3")]
        public void Test_LoginWithFacebookToken_With_TokenExpiration_MaxLong(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775," +
                               "\"new_user_created\" : false" +
                               "}");

            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
 
            // set access token expiration
            Kii.AccessTokenExpiration = long.MaxValue;
            Assert.AreEqual(long.MaxValue, Kii.AccessTokenExpiration);

            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LoginWithFacebookToken("dummyFbToken");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, (DateTime)tokenBundle["expires_at"]);

            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps",APP_ID, "integration", "facebook");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));

            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("dummyFbToken", requestBody.GetString("accessToken"));
            Assert.AreEqual(DateTimeMaxToUnixTimeMillis(), requestBody.GetLong("expiresAt"));
        }

        [Test(), TestCaseNumber("2-3-1")]
        public void Test_LoginWithLocalPhone_Without_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"PHONE: JP-123456\"" +
                               "}");
            
            // check expiresIn set to default.
            Assert.AreEqual(0, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogInWithLocalPhone("123456", "111111", "JP");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, (DateTime)tokenBundle["expires_at"]);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("PHONE:JP-123456", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
        }
        
        [Test(), TestCaseNumber("2-3-2")]
        public void Test_LoginWithLocalPhone_With_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 3600" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"PHONE: JP-123456\"" +
                               "}");
            
            // set access token expiration
            Kii.AccessTokenExpiration = 3600;
            Assert.AreEqual(3600, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser.LogInWithLocalPhone("123456", "111111", "JP");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            DateTime expiresAt = (DateTime) tokenBundle["expires_at"];
            Assert.IsTrue( DateTime.Compare(expiresAt, DateTime.UtcNow) > 0);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify body.
            JsonObject requestBody = new JsonObject(client.RequestBody[0]);
            Assert.AreEqual(3, requestBody.Length());
            Assert.AreEqual("PHONE:JP-123456", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
            Assert.IsTrue(requestBody.GetLong("expiresAt") >= CurrentTimeMillis());
        }

        [Test(), TestCaseNumber("2-4-1")]
        public void Test_Register_Without_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set register response
            client.AddResponse(201,
                               "{" +
                               "\"userID\" : \"dummyID\"," +
                               "\"internalUserID\" : \"dummyInternalID\"," +
                               "\"loginName\" : \"dummyUser\"" +
                               "}");

            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 9223372036854775" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
            
            // check expiresIn set to default.
            Assert.AreEqual(0, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser user = KiiUser.BuilderWithName("dummyName").Build();
            user.Register("111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(DateTime.MaxValue, (DateTime)tokenBundle["expires_at"]);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[1]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[1]);
            MockHttpHeaderList headerList = client.RequestHeader[1];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify login body.
            JsonObject requestBody = new JsonObject(client.RequestBody[1]);
            Assert.AreEqual(2, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
        }
        
        [Test(), TestCaseNumber("2-4-2")]
        public void Test_Register_With_TokenExpiration(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set register response
            client.AddResponse(201,
                               "{" +
                               "\"userID\" : \"dummyID\"," +
                               "\"internalUserID\" : \"dummyInternalID\"," +
                               "\"loginName\" : \"dummyUser\"" +
                               "}");

            // set login response
            client.AddResponse(200,
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"access_token\" : \"dummyToken\"," +
                               "\"expires_in\" : 3600" +
                               "}");
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"id\" : \"efgh\"," +
                               "\"username\" : \"dummyUser\"" +
                               "}");
            
            // set access token expiration
            Kii.AccessTokenExpiration = 3600;
            Assert.AreEqual(3600, Kii.AccessTokenExpiration);
            
            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            KiiUser user = KiiUser.BuilderWithName("dummyName").Build();
            user.Register("111111");
            Assert.IsNotNull(KiiUser.CurrentUser);
            IDictionary tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            DateTime expiresAt = (DateTime) tokenBundle["expires_at"];
            Assert.IsTrue( DateTime.Compare(expiresAt, DateTime.UtcNow) > 0);
            
            // verify login request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"oauth2","token");
            Assert.AreEqual(url, client.RequestUrl[1]);
            Assert.AreEqual(KiiHttpMethod.POST, client.RequestMethod[1]);
            MockHttpHeaderList headerList = client.RequestHeader[1];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
            // verify login body.
            JsonObject requestBody = new JsonObject(client.RequestBody[1]);
            Assert.AreEqual(3, requestBody.Length());
            Assert.AreEqual("dummyUser", requestBody.GetString("username"));
            Assert.AreEqual("111111", requestBody.GetString("password"));
            Assert.IsTrue(requestBody.GetLong("expiresAt") >= CurrentTimeMillis());
        }

        [Test(), TestCaseNumber("3-1-1")]
        public void Test_GetAccessTokenDictionary_WhenUserIsNotLoggedIn(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            KiiUser user = KiiUser.BuilderWithName("dummyName").Build();
            Assert.IsNull(KiiUser.CurrentUser);
            IDictionary dict = user.GetAccessTokenDictionary();
            Assert.IsNull(dict);
        }

        [Test(), ExpectedException(typeof(InvalidOperationException)), TestCaseNumber("3-1-2")]
        public void Test_GetAccessTokenDictionary__BeforeInitialization(){
            KiiUser user = KiiUser.BuilderWithName("dummyName").Build();
            IDictionary dict = user.GetAccessTokenDictionary();
        }

        private long CurrentTimeMillis() {
            DateTime epock = new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);
            return (long)DateTime.UtcNow.Subtract(epock).TotalMilliseconds;
        }

        private static long DateTimeMaxToUnixTimeMillis() {
            DateTime UNIX_EPOCH = new DateTime(1970, 1, 1, 0, 0, 0, 0);
            TimeSpan elapsedTime = DateTime.MaxValue - UNIX_EPOCH;
            return (long)elapsedTime.TotalMilliseconds;
        }

        private static long DateTimeMinToUnixTimeMillis() {
            DateTime UNIX_EPOCH = new DateTime(1970, 1, 1, 0, 0, 0, 0);
            TimeSpan elapsedTime = DateTime.MinValue - UNIX_EPOCH;
            return (long)elapsedTime.TotalMilliseconds;
        }
    }
}

