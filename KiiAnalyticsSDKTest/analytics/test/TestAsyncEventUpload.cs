// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using JsonOrg;
using KiiCorp.Cloud.Storage;
using NUnit.Framework;

// Test spec : https://docs.google.com/a/kii.com/spreadsheet/ccc?key=0AlSyizQDsStPdE5mVXRLVWNURS1yUmo3SWpYMFVlOVE&usp=drive_web#gid=0
namespace KiiCorp.Cloud.Analytics
{
    [TestFixture()]
    public class TestAsyncEventUpload
    {

        private KiiEvent[] CreateEvents ()
        {
            KiiEvent ev1 = KiiAnalytics.NewEvent ("type1");
            ev1 ["page"] = 1;
            ev1 ["label"] = "OK";
            
            KiiEvent ev2 = KiiAnalytics.NewEvent ("type1");
            ev2 ["page"] = 2;
            ev2 ["label"] = "Cancel";
            
            KiiEvent ev3 = KiiAnalytics.NewEvent ("type1");
            ev3 ["page"] = 3;
            ev3 ["label"] = "Next";
            
            return new KiiEvent[] { ev1, ev2, ev3};
        }

        private int ToCount(IEnumerator<string> it)
        {
            int count = 0;
            while (it.MoveNext())
            {
                ++count;
            }
            return count;
        }

        [SetUp()]
        public void Setup()
        {
            KiiAnalytics.Instance = null;
            KiiAnalytics.Initialize ("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
        }


        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_1_Upload_EventArray_Null ()
        {
            KiiAnalytics.Upload ((Exception e) => {}, null);
        }
        
        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_2_Upload_EventArray_Empty ()
        {
            KiiAnalytics.Upload ((Exception e) => {}, new KiiEvent[]{});
        }
        
        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_3_Upload_EventListLength_Large ()
        {
            KiiEvent ev = KiiAnalytics.NewEvent ("type1");
            var eventList = Enumerable.Repeat<KiiEvent> (ev, 51);
            KiiAnalytics.Upload ((Exception e) => {}, eventList.Cast<KiiEvent>().ToArray());
        }

        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_4_Upload_Event_Null ()
        {
            KiiEvent ev = KiiAnalytics.NewEvent ("type1");
            KiiAnalytics.Upload ((Exception e) => {}, new KiiEvent[]{ev, null});
        }
        
        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_5_Upload_AllEvents_AlreadySent ()
        {
            KiiAnalytics.Initialize ("appID005", "appKey", KiiAnalytics.Site.JP, "dev005");
            KiiEvent ev = KiiAnalytics.NewEvent ("type1");
            ev.Sent = true;
            KiiAnalytics.Upload ((Exception e) => {}, new KiiEvent[]{ev, null});
        }

        [Test()]
        public void Test_1_6_Upload_NullCallback ()
        {
            KiiAnalytics.Initialize("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
            KiiEvent ev = KiiAnalytics.NewEvent("type1");
            ev["page"] = 1;
            ev["label"] = "OK";
            Assert.IsFalse(ev.Sent);
            
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse(204, "");
            
            // async upload
            KiiEventCallback callback = null;
            KiiAnalytics.Upload(callback, ev);

            // verify event uploaded
            Assert.IsTrue(ev.Sent);
        }

        [Test()]
        public void Test_1_7_Upload ()
        {
            KiiAnalytics.Initialize("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
            KiiEvent ev = KiiAnalytics.NewEvent("type1");
            ev["page"] = 1;
            ev["label"] = "OK";
            
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse(204, "");

            // async upload
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch(1);
            KiiAnalytics.Upload((Exception e)=> {
                exp = e;
                cd.Signal();
            }, ev);

            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.Null(exp);
            Assert.AreEqual("https://api-jp.kii.com/api/apps/appID004/events", client.RequestUrl[0]);
            Assert.AreEqual("application/vnd.kii.EventRecordList+json", client.RequestContentType[0]);
            JsonArray array = new JsonArray(client.RequestBody[0]);
            JsonObject json = array.GetJsonObject(0);
            int count = ToCount(json.Keys());
            Assert.AreEqual(6, count);
            Assert.AreEqual(1, json.GetInt("page"));
            Assert.AreEqual("OK", json.GetString("label"));
            Assert.AreEqual("dev004", json.GetString("_deviceID"));
            Assert.AreEqual("type1", json.GetString("_type"));
            Assert.IsTrue(json.Has("_triggeredAt"));
            Assert.IsTrue(json.Has("_uploadedAt"));
        }

        [Test()]
        public void Test_1_8_Upload_PartialSuccess ()
        {
            KiiAnalytics.Initialize ("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
            KiiEvent[] events = CreateEvents ();
            
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory ();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse (200, 
                               "{" +
                "\"errorCode\" : \"PARTIAL_SUCCESS\"," +
                "\"message\" : \"There are some errors in event data\"," +
                "\"invalidEvents\" : [" +
                "{" +
                "\"index\" : 0," +
                "\"errorDetails\" : [ {" +
                "\"fieldName\" : \"_uploadedAt\"," +
                "\"errorCode\" : \"UPLOADED_AT_MISSING\"," +
                "\"message\" : \"You must provide event upload time\"}]" +
                "}," +
                "{" +
                "\"index\" : 1," +
                "\"errorDetails\" : [ {" +
                "\"fieldName\" : \"_uploadedAt\"," +
                "\"errorCode\" : \"UPLOADED_AT_MISSING\"," +
                "\"message\" : \"You must provide event upload time\"}]" +
                "}," +
                "{" +
                "\"index\" : 2," +
                "\"errorDetails\" : [ {" +
                "\"fieldName\" : \"_uploadedAt\"," +
                "\"errorCode\" : \"UPLOADED_AT_MISSING\"," +
                "\"message\" : \"You must provide event upload time\"}]" +
                "}" +
                "]" +
                "}");

            // async upload
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch (1);
            KiiAnalytics.Upload ((Exception e) => {
                exp = e;
                cd.Signal ();
            }, events);
            
            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.NotNull (exp);
            Assert.That (exp, Is.InstanceOf<EventUploadException> ());
            EventUploadException ue = (EventUploadException)exp;
            IList<KiiEvent> errorList = ue.ErrorEvents;
            Assert.IsFalse (events [0].Sent);
            Assert.IsFalse (events [1].Sent);
            Assert.IsFalse (events [2].Sent);                
            Assert.AreEqual (3, errorList.Count);
                
            KiiEvent error1 = errorList [0];
            Assert.AreEqual (1, error1 ["page"]);
            Assert.AreEqual ("OK", error1 ["label"]);
                
            KiiEvent error2 = errorList [1];
            Assert.AreEqual (2, error2 ["page"]);
            Assert.AreEqual ("Cancel", error2 ["label"]);
                
            KiiEvent error3 = errorList [2];
            Assert.AreEqual (3, error3 ["page"]);
            Assert.AreEqual ("Next", error3 ["label"]);
        }

        [Test()]
        public void Test_1_9_Upload_FailByCloudException ()
        {
            KiiAnalytics.Initialize ("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
            KiiEvent[] events = CreateEvents ();
            
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory ();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse (new CloudException(400, ""));
            
            // async upload
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch (1);
            KiiAnalytics.Upload ((Exception e) => {
                exp = e;
                cd.Signal ();
            }, events);
            
            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.NotNull (exp);
            Assert.That (exp, Is.InstanceOf<EventUploadException> ());
            EventUploadException ue = (EventUploadException)exp;
            IList<KiiEvent> errorList = ue.ErrorEvents;
            Assert.IsFalse (events [0].Sent);
            Assert.IsFalse (events [1].Sent);
            Assert.IsFalse (events [2].Sent);                
            Assert.AreEqual (3, errorList.Count);
            
            KiiEvent error1 = errorList [0];
            Assert.AreEqual (1, error1 ["page"]);
            Assert.AreEqual ("OK", error1 ["label"]);
            
            KiiEvent error2 = errorList [1];
            Assert.AreEqual (2, error2 ["page"]);
            Assert.AreEqual ("Cancel", error2 ["label"]);
            
            KiiEvent error3 = errorList [2];
            Assert.AreEqual (3, error3 ["page"]);
            Assert.AreEqual ("Next", error3 ["label"]);
        }

    }
}

