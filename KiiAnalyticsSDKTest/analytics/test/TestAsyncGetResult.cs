// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using JsonOrg;
using KiiCorp.Cloud.Storage;
using NUnit.Framework;
using System.Threading;

namespace KiiCorp.Cloud.Analytics
{
    // Test spec : https://docs.google.com/a/kii.com/spreadsheet/ccc?key=0AlSyizQDsStPdE5mVXRLVWNURS1yUmo3SWpYMFVlOVE&usp=drive_web#gid=1
    [TestFixture()]
    public class TestAsyncGetResult
    {
        [SetUp()]
        public void Setup()
        {
            KiiAnalytics.Instance = null;
            KiiAnalytics.Initialize ("appID004", "appKey", KiiAnalytics.Site.JP, "dev004");
        }

        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_1_1_GetResult_RuleID_Null ()
        {
            KiiAnalytics.Initialize ("appID005", "appKey", KiiAnalytics.Site.JP, "dev005");
            KiiAnalytics.GetResult(null, new ResultCondition(), (string s, ResultCondition c, GroupedResult r, Exception e)=>{});
        }

        [Test()]
        public void Test_1_2_GetResult_ConditionNull ()
        {
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory ();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{" +
                               "\"snapshots\" : [ {" +
                               "\"name\" : \"Male\"," +
                               "\"data\" : [ 546.775207 ]," +
                               "\"pointStart\" : 1338044400000," +
                               "\"pointInterval\" : 86400000}, " +
                               "{" +
                               "\"name\" : \"Female\"," +
                               "\"data\" : [ 325.216381 ]," +
                               "\"pointStart\" : 1338044400000," +
                               "\"pointInterval\" : 86400000}" +
                               "]}");
            
            GroupedResult result = null;
            string ruleId = null;
            ResultCondition condition = null;
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch(1);
            KiiAnalytics.GetResult("a", null, (string id, ResultCondition c, GroupedResult r, Exception e)=>{
                Interlocked.Exchange(ref result, r);
                Interlocked.Exchange(ref ruleId, id);
                Interlocked.Exchange(ref condition, c);
                Interlocked.Exchange(ref exp, e);
                cd.Signal();
            });

            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.AreEqual(ruleId, "a");
            Assert.IsNull(condition);
            Assert.IsNotNull(result);
            Assert.IsNull(exp);

            Assert.IsNotNull(result.SnapShots);
            IList<GroupedSnapShot> snapshots = result.SnapShots;
            Assert.AreEqual(2, snapshots.Count);
            
            GroupedSnapShot snapShot1 = snapshots[0];
            Assert.AreEqual("Male", snapShot1.Name);
            Assert.AreEqual(1338044400000, snapShot1.PointStart);
            Assert.AreEqual(86400000, snapShot1.PointInterval);
            JsonArray data = snapShot1.Data;
            Assert.AreEqual(1, data.Length());
            
            GroupedSnapShot snapShot2 = snapshots[1];
            Assert.AreEqual("Female", snapShot2.Name);
            Assert.AreEqual(1338044400000, snapShot2.PointStart);
            Assert.AreEqual(86400000, snapShot2.PointInterval);
            data = snapShot2.Data;
            Assert.AreEqual(1, data.Length());
            
        }

        [Test()]
        public void Test_1_3_GetResult_Fail()
        {
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory ();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse(new CloudException(400,""));
            
            GroupedResult result = null;
            string ruleId = null;
            ResultCondition condition = null;
            Exception exp = null;
            CountDownLatch cd = new CountDownLatch(1);
            KiiAnalytics.GetResult("a", null, (string id, ResultCondition c, GroupedResult r, Exception e)=>{
                Interlocked.Exchange(ref result, r);
                Interlocked.Exchange(ref ruleId, id);
                Interlocked.Exchange(ref condition, c);
                Interlocked.Exchange(ref exp, e);
                cd.Signal();
            });
            
            if(!cd.Wait(new TimeSpan(0, 0, 0, 3)))
                Assert.Fail("Callback not fired.");
            Assert.AreEqual(ruleId, "a");
            Assert.IsNull(condition);
            Assert.IsNull(result);
            Assert.IsNotNull(exp);
            Assert.True(exp is CloudException);
            
        }

        [Test()]
        public void Test_1_5_GetResult_CallbackNull ()
        {
            // set mock
            MockHttpClientFactory factory = new MockHttpClientFactory ();
            KiiAnalytics.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            client.AddResponse(200, "{" +
                               "\"snapshots\" : [ {" +
                               "\"name\" : \"Male\"," +
                               "\"data\" : [ 546.775207 ]," +
                               "\"pointStart\" : 1338044400000," +
                               "\"pointInterval\" : 86400000}]}");
            
            // call with null callback.
            KiiAnalytics.GetResult("a", null, null);
        }

    }
}

