// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;
using System.Collections.Generic;

namespace KiiCorp.Cloud.Storage
{
    [TestFixture]
    public class KiiUser_LoginWithTokenAndExpiresAtTest
    {
        private static  string APP_ID = "dummyId";
        private static  string APP_KEY = "dummykey";
        
        [SetUp()]
        public void SetUp() {
            if(Kii.Instance != null)
                Kii.Instance = null;
        }
        
        [TearDown()]
        public void TearDown() {
            if(Kii.Instance != null)
                Kii.Instance = null;
        }

        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_LoginWithTokenAndExpiresAt_TokenNull() {
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            KiiUser.LoginWithToken(null, DateTime.MaxValue);
        }
        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_LoginWithTokenAndExpiresAt_Async_TokenNull() {
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            KiiUser.LoginWithToken(null, DateTime.MaxValue, (KiiUser user, Exception e ) => {
                // do nothing.
            });
            Assert.Fail("Exception has not thrown.");
        }

        [Test(), ExpectedException(typeof(ArgumentException))]
        public void Test_LoginWithTokenAndExpiresAt_Async_CallBackNull() {
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            KiiUser.LoginWithToken("abcd1234", DateTime.MaxValue, null);
            Assert.Fail("Exception has not thrown.");
        }

        [Test()]
        public void Test_LoginWithTokenAndExpiresAt(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);

            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.HttpClientFactory = factory;
            MockHttpClient client = factory.Client;

            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"userID\" : \"dummyID\"," +
                               "\"loginName\" : \"dummyUser\"" +
                               "}");

            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            DateTime expiresAt = DateTime.UtcNow;
            KiiUser.LoginWithToken("dummyToken", expiresAt);
            Assert.IsNotNull(KiiUser.CurrentUser);

            // verify token dictionary
            Dictionary<string, object> tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(expiresAt, tokenBundle["expires_at"]);

            // verify refresh request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps",APP_ID, "users", "me");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.GET, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
        }

        [Test()]
        public void Test_LoginWithTokenAndExpiresAt_Async(){
            Kii.Initialize(APP_ID,APP_KEY, Kii.Site.US);
            
            // mock http client 
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            MockHttpClient client = factory.Client;
            
            // set refresh response
            client.AddResponse(200, 
                               "{" +
                               "\"userID\" : \"dummyID\"," +
                               "\"loginName\" : \"dummyUser\"" +
                               "}");

            // perform login.
            Assert.IsNull(KiiUser.CurrentUser);
            DateTime expiresAt = DateTime.UtcNow;
            CountDownLatch cd = new CountDownLatch(1);
            KiiUser loggedInUser = null;
            Exception exp = null;
            KiiUser.LoginWithToken("dummyToken", expiresAt, (KiiUser user, Exception e ) => {
                loggedInUser = user;
                exp = e;
                cd.Signal();
            });

            if(!cd.Wait())
                Assert.Fail("Callback has not called.");

            Assert.IsNull(exp);
            Assert.IsNotNull(loggedInUser);
            Assert.IsNotNull(KiiUser.CurrentUser);
            Assert.AreEqual(loggedInUser, KiiUser.CurrentUser);

            // verify token dictionary
            Dictionary<string, object> tokenBundle = KiiUser.CurrentUser.GetAccessTokenDictionary();
            Assert.AreEqual("dummyToken", tokenBundle["access_token"]);
            Assert.AreEqual(expiresAt, tokenBundle["expires_at"]);
            
            // verify refresh request
            string url = Utils.Path(ConstantValues.DEFAULT_BASE_URL,"apps",APP_ID, "users", "me");
            Assert.AreEqual(url, client.RequestUrl[0]);
            Assert.AreEqual(KiiHttpMethod.GET, client.RequestMethod[0]);
            MockHttpHeaderList headerList = client.RequestHeader[0];
            Assert.AreEqual(APP_ID,headerList["X-Kii-AppID"] );
            Assert.AreEqual(APP_KEY,headerList["X-Kii-AppKey"] );
            Assert.IsTrue(headerList["X-Kii-SDK"].StartsWith("sn=cs;sv="));
            
        }
    }
}

