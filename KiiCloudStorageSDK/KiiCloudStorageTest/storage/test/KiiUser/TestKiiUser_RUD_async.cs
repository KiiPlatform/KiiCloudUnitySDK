// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using NUnit.Framework;

namespace KiiCorp.Cloud.Storage
{
    [TestFixture()]
    public class TestKiiUser_RUD_async
    {
        private MockHttpClient client;

        [SetUp()]
        public void SetUp()
        {
            Kii.Initialize("appId", "appKey", Kii.Site.US);
            MockHttpClientFactory factory = new MockHttpClientFactory();
            Kii.AsyncHttpClientFactory = factory;
            
            client = (MockHttpClient)factory.Client;
        }

        private void setStandardResponseForRefresh()
        {
            client.AddResponse(200, "{" +
                               "\"userID\" : \"userABCD\"," +
                               "\"internalUserID\" : 87442786592227328," +
                               "\"loginName\" : \"test001\"," +
                               "\"displayName\" : \"person test000\"," +
                               "\"country\" : \"JP\"," +
                               "\"emailAddress\" : \"test001@testkii.com\"," +
                               "\"emailAddressVerified\" : false," +
                               "\"phoneNumber\" : \"+819098439211\"," +
                               "\"phoneNumberVerified\" : true}");
        }

        private void LogIn()
        {
            // set Response
            client.AddResponse(200, "{" +
                               "\"id\" : \"user1234\"," +
                               "\"access_token\" : \"cdef\"," +
                               "\"expires_in\" : 9223372036854775}");
            KiiUser.LogIn("kii1234", "pass1234", null);
        }

        #region KiiUser.Refresh(KiiUserCallback)

        [Test(), KiiUTInfo(
            action = "When we call Refresh(callback) and Server returns KiiUser,",
            expected = "We can get UserID/DisplayName/Country/Email/EmailVerified/Phone/PhoneVerified that server sends"
            )]
        public void Test_0000_Refresh()
        {
            // set response
            this.setStandardResponseForRefresh();
            
            KiiUser user = KiiUser.CreateByUri(new Uri("kiicloud://users/abcd"));

            bool done = false;
            KiiUser refreshed = null;
            Exception exception = null;
            user.Refresh((KiiUser u, Exception e) =>
            {
                done = true;
                refreshed = u;
                exception = e;
            });

            Assert.IsTrue(done);
            Assert.IsNotNull(refreshed);
            Assert.IsNull(exception);

            Assert.AreEqual("abcd", refreshed.ID);
            Assert.AreEqual("person test000", refreshed.Displayname);
            Assert.AreEqual("JP", refreshed.Country);
            Assert.AreEqual("test001@testkii.com", refreshed.Email);
            Assert.AreEqual(false, refreshed.EmailVerified);
            Assert.AreEqual("+819098439211", refreshed.Phone);
            Assert.AreEqual(true, refreshed.PhoneVerified);
        }
        
        [Test(), KiiUTInfo(
            action = "When we call Refresh(callback) to KiiUser that doesn't have UserID,",
            expected = "InvalidOperationException must be thrown"
            )]
        public void Test_0001_Refresh_null_id()
        {
            // set response
            this.setStandardResponseForRefresh();
            
            KiiUser user = KiiUser.BuilderWithName("kii1234").Build();

            bool done = false;
            KiiUser refreshed = null;
            Exception exception = null;
            user.Refresh((KiiUser u, Exception e) =>
            {
                done = true;
                refreshed = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(refreshed);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);

        }
        
        [Test(), KiiUTInfo(
            action = "When we call Refresh(callback) and Server returns HTTP 400,",
            expected = "CloudException must be thrown"
            )]
        public void Test_0010_Refresh_server_error()
        {
            // set response
            client.AddResponse(new CloudException(400, "{}"));
            
            KiiUser user = KiiUser.CreateByUri(new Uri("kiicloud://users/abcd"));
            bool done = false;
            KiiUser refreshed = null;
            Exception exception = null;
            user.Refresh((KiiUser u, Exception e) =>
            {
                done = true;
                refreshed = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(refreshed);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is CloudException);
        }

        [Test(), KiiUTInfo(
            action = "When we call Refresh(callback) and Server returns broken JSON,",
            expected = "IllegalKiiBaseObjectFormatException must be thrown"
            )]
        public void Test_0011_Refresh_broken_JSON()
        {
            // set response
            client.AddResponse(200, "broken");
            
            KiiUser user = KiiUser.CreateByUri(new Uri("kiicloud://users/abcd"));
            bool done = false;
            KiiUser refreshed = null;
            Exception exception = null;
            user.Refresh((KiiUser u, Exception e) =>
            {
                done = true;
                refreshed = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(refreshed);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is IllegalKiiBaseObjectFormatException);
        }
        #endregion

        #region KiiUser.Update(KiiUserCallback)

        [Test(), KiiUTInfo(
            action = "When we call Update(callback) and Server returns HTTP 200,",
            expected = "user is updated"
            )]
        public void Test_0100_Update ()
        {
            this.LogIn();

            KiiUser user = KiiUser.CurrentUser;
            user["age"] = 29;

            // set response
            client.AddResponse(200, 
                    "{" +
                    "\"modifiedAt\" : 1386684079176" +
                    "}");

            bool done = false;
            KiiUser updated = null;
            Exception exception = null;
            user.Update((KiiUser u, Exception e) =>
            {
                done = true;
                updated = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(updated);
            Assert.IsNull(exception);

            // Assertion
            Assert.AreEqual(29, updated["age"]);
        }

        [Test(), KiiUTInfo(
            action = "When we call Update() with other user,",
            expected = "InvalidOperationException is thrown"
            )]
        public void Test_0110_Update_other_user ()
        {
            this.LogIn();
            
            KiiUser user = KiiUser.CreateByUri(new Uri("kiicloud://users/1234"));
            user["age"] = 29;
            
            // set response
            client.AddResponse(200, 
                               "{" +
                               "\"modifiedAt\" : 1386684079176" +
                               "}");

            bool done = false;
            KiiUser updated = null;
            Exception exception = null;
            user.Update((KiiUser u, Exception e) =>
            {
                done = true;
                updated = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNull(updated);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is InvalidOperationException);
        }

        [Test(), KiiUTInfo(
            action = "When we call Update() and Server returns HTTP 400,",
            expected = "CloudException is thrown"
            )]
        public void Test_0111_Update_Server_error ()
        {
            this.LogIn();
            
            KiiUser user = KiiUser.CurrentUser;
            user["age"] = 29;
            
            // set response
            client.AddResponse(new CloudException(400, "{}"));

            bool done = false;
            KiiUser updated = null;
            Exception exception = null;
            user.Update((KiiUser u, Exception e) =>
            {
                done = true;
                updated = u;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNull(updated);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is CloudException);
        }
        #endregion

        #region KiiUser.Delete(KiiUserCallback)
        [Test(), KiiUTInfo(
            action = "When we call Delete(callback) and Server returns HTTP 204,",
            expected = "No exception is thrown"
            )]
        public void Test_0200_Delete ()
        {
            this.LogIn();
            
            KiiUser user = KiiUser.CurrentUser;
            
            // set response
            client.AddResponse(204, ""); 

            bool done = false;
            Exception exception = null;
            user.Delete((Exception e) =>
            {
                done = true;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNull(exception);

            // Assertion
            Assert.IsNull(KiiUser.CurrentUser);
        }

        [Test(), KiiUTInfo(
            action = "When we call Delete(callback) and Server returns HTTP 400,",
            expected = "CloudException is thrown"
            )]
        public void Test_0210_Delete_Server_error ()
        {
            this.LogIn();
            
            KiiUser user = KiiUser.CurrentUser;
            
            // set response
            client.AddResponse(new CloudException(400, "{}"));

            bool done = false;
            Exception exception = null;
            user.Delete((Exception e) =>
            {
                done = true;
                exception = e;
            });
            
            Assert.IsTrue(done);
            Assert.IsNotNull(exception);
            Assert.IsTrue(exception is CloudException);
        }
        #endregion
    }
}

